from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from filters.chat_types import ChatTypeFilter
from .db import *
from keyboards import *


router = Router()

aboutus = '–≠–¢–û –ë–ê–ó–ê'
welcomemessage = 'Welcome'
question_first_msg = 'üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ):'
handler_button_new_question = '‚úâ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
handler_button_about_us = 'üìö –ü—Ä–æ –Ω–∞—Å'


tehchatid = '-1002483146691'
message_sended = '‚úâ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–æ—Å–ª–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏.'



class Question(StatesGroup):
    text = State()

@router.message(ChatTypeFilter('private'), CommandStart())
async def client_start(message: Message):
    if db_profile_exist(message.from_user.id):
        await message.answer(welcomemessage, parse_mode='Markdown', reply_markup=mainmenu)
    else:
        db_profile_insertone({
            '_id': message.from_user.id,
            'username': message.from_user.username,
            'access': 0,
            'ban': 0
        })
        print('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        await message.answer(welcomemessage, parse_mode='Markdown', reply_markup=mainmenu)


@router.message(ChatTypeFilter('private'), StateFilter(None))
async def client_newquestion(message: Message, state: FSMContext):
    banned = db_profile_banned(message.from_user.id)

    if banned:
        await message.answer("‚ö† –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* —É –±–æ—Ç–∞!", parse_mode='Markdown')
        return

    if message.text == handler_button_new_question:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ):")
        await state.set_state(Question.text)
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ FSMQuestion.text")
    if message.text == handler_button_about_us:
        await message.answer(f"{aboutus}", disable_web_page_preview=True, parse_mode='Markdown')


@router.message(ChatTypeFilter('private'), StateFilter(Question.text))
async def newquestion(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if message.content_type == 'photo':
        data['text'] = message.caption
    else:
        data['text'] = message.text

    await state.clear()

    who = f"@{message.chat.username}" if message.chat.username else "–ù–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    question = data['text']

    await message.reply(message_sended, parse_mode='Markdown')

    if message.content_type == 'photo':
        ph = message.photo[0].file_id
        await message.bot.send_photo(tehchatid, ph,
                             caption=f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {who}\n–í–æ–ø—Ä–æ—Å: `{question}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {message.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`",
                             parse_mode='Markdown')
    else:
        await message.bot.send_message(tehchatid,
                               f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {who}\n–í–æ–ø—Ä–æ—Å: `{question}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {message.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`",
                               parse_mode='Markdown')


@router.message(ChatTypeFilter('group'), Command('get_id'))
async def client_getgroupid(message: types.Message):
        await message.answer(f"Chat id is: *{message.chat.id}*\nYour id is: *{message.from_user.id}*", parse_mode='Markdown')

