from aiogram import Router
from aiogram.types import Message
import logging
from aiogram.filters import Command

from handlers.db import db_profile_access, db_profile_exist, db_profile_updateone, db_profile_exist_usr, db_profile_get_usrname


router = Router()

errormessage = 'error_message'
lvl1name = '–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞'
lvl2name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
lvl3name = '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
devid = 'dev_id'

def extract_arg(arg):
    return arg.split()[1:]


@router.message(Command(commands=["–æ—Ç–≤–µ—Ç"]))
async def admin_ot(message: Message):
    uid = message.from_user.id

    if db_profile_access(uid) >= 1:
        args = extract_arg(message.text)
        if len(args) >= 2:
            chatid = str(args[0])
            args.pop(0)
            answer = " ".join(args)
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!')
            await message.bot.send_message(chatid,
                                   f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n`{answer}`",
                                   parse_mode='Markdown')
        else:
            await message.answer(
                '‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–æ—Ç–≤–µ—Ç 516712732 –í–∞—à –æ—Ç–≤–µ—Ç`',
                parse_mode='Markdown')
    else:
        return

@router.message(Command(commands=["–¥–æ—Å—Ç—É–ø"]))
async def admin_giveaccess(message: Message):
    uidown = message.from_user.id
    logging.info(f"User {uidown} called /–¥–æ—Å—Ç—É–ø command")

    if db_profile_access(uidown) >= 3:
        args = extract_arg(message.text)
        if len(args) == 2:
            try:
                uid = int(args[0])
                access = int(args[1])
                logging.debug(f"Parsed arguments: uid={uid}, access={access}")

                if db_profile_exist(uid):
                    if access == 0:
                        outmsg = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø—ã —Å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!"
                    elif access == 1:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl1name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    elif access == 2:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl2name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    elif access == 3:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl3name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    else:
                        await message.answer(
                            '‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: *3*',
                            parse_mode='Markdown')
                        return

                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    db_profile_updateone(uid, {"access": access})
                    logging.info(f"Updated access level for user {uid} to {access}")
                    await message.answer(outmsg, parse_mode='Markdown')
                else:
                    logging.warning(f"User {uid} not found in the database")
                    await message.answer(
                        "‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                        parse_mode='Markdown')
            except ValueError as e:
                logging.error(f"Error parsing arguments: {e}")
                await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!",
                                     parse_mode='Markdown')
        else:
            await message.answer(
                '‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–¥–æ—Å—Ç—É–ø 516712372 1`',
                parse_mode='Markdown')


@router.message(Command(commands=["–±–∞–Ω"]))
async def admin_ban(message: Message):
    uidown = message.from_user.id

    if db_profile_access(uidown) >= 2:
        args = extract_arg(message.text)
        if len(args) >= 2:  # –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: uid –∏ –ø—Ä–∏—á–∏–Ω–∞
            uid = int(args[0])
            reason = " ".join(args[1:])  # –ü—Ä–∏—á–∏–Ω–∞ ‚Äî –≤—Å—ë, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ uid
            if db_profile_exist(uid):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –∏ –ø—Ä–∏—á–∏–Ω—É
                db_profile_updateone(uid, {"ban": 1, "ban_reason": reason})
                await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}',
                                     parse_mode='Markdown')
                await message.bot.send_message(uid, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª* –í–∞—Å –≤ –±–æ—Ç–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}",
                                               parse_mode='Markdown')
            else:
                await message.answer("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                     parse_mode='Markdown')
        else:
            await message.answer(
                '‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–±–∞–Ω 516272834 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª`',
                parse_mode='Markdown')




@router.message(Command(commands=["—Ä–∞–∑–±–∞–Ω"]))
async def admin_unban(message: Message):
    uidown = message.from_user.id

    if db_profile_access(uidown) >= 2:
        args = extract_arg(message.text)
        if len(args) >= 2:  # –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: uid –∏ –ø—Ä–∏—á–∏–Ω–∞
            uid = int(args[0])
            reason = " ".join(args[1:])  # –ü—Ä–∏—á–∏–Ω–∞ ‚Äî –≤—Å—ë, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ uid
            if db_profile_exist(uid):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–∞–Ω–∞ –∏ –ø—Ä–∏—á–∏–Ω—É
                db_profile_updateone(uid, {"ban": 0, "ban_reason": reason})
                await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}',
                                     parse_mode='Markdown')
                await message.bot.send_message(uid, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª* –í–∞—Å –≤ –±–æ—Ç–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}",
                                               parse_mode='Markdown')
            else:
                await message.answer("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                     parse_mode='Markdown')
        else:
            await message.answer(
                '‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/—Ä–∞–∑–±–∞–Ω 516272834 –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è`',
                parse_mode='Markdown')


@router.message(Command(commands=["–∞–π–¥–∏"]))
async def admin_id(message: Message):
    args = extract_arg(message.text)
    if len(args) == 1:
        username = args[0]
        if db_profile_exist_usr(username):
            uid = db_profile_get_usrname(username, '_id')
            await message.answer(f"üÜî {uid}")
        else:
            await message.answer("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                 parse_mode='Markdown')
    else:
        await message.answer(
            '‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–∞–π–¥–∏ nosemka`',
            parse_mode='Markdown')
